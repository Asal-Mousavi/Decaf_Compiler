
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARITH_OP ASSIGN BOOLEAN BREAK CALLOUT CHAR CLASS CLOSE COMMA COMMENT COND_OP CONTINUE C_BRACKET C_PAR DECIMAL ELSE EQ_OP EXCL FALSE HEXDECIMAL IDENTIFIER IF INT KEYWORD NEGATIVE NEWLINE OPEN O_BRACKET O_PAR PROGRAM REP_OP RETURN SEMI STRING TAB TRUE VOID WHILE\n    program : CLASS PROGRAM OPEN field_decl method_decl CLOSE\n    field_decl : type field_decl_1 SEMI\n                    | field_decl field_decl\n                    | field_decl NEWLINE\n                    | empty\n                    field_decl_1 : IDENTIFIER\n                    | IDENTIFIER O_BRACKET int_literal C_BRACKET\n                    | field_decl_1 COMMA field_decl_1\n\n    \n        method_decl : type_or_void IDENTIFIER O_PAR type_and_id C_PAR block\n                    | method_decl NEWLINE\n                    | method_decl method_decl\n                    | empty\n    \n    type_and_id : type IDENTIFIER\n                | type_and_id COMMA type_and_id\n    \n        type_or_void : type\n                    | VOID\n    \n    block : OPEN var_decl statement CLOSE\n    | OPEN CLOSE\n    var_decl : type var_decl_1 SEMI\n                | var_decl var_decl NEWLINE\n                | empty\n                var_decl_1 : IDENTIFIER\n                | var_decl_1 COMMA var_decl_1type : INT\n                | BOOLEANstatement : location ASSIGN expr SEMI\n           | method_call SEMI\n           | IF O_PAR expr C_PAR block NEWLINE else_or_empty\n           | WHILE O_PAR expr C_PAR block\n           | RETURN expr_or_empty SEMI\n           | BREAK SEMI\n           | CONTINUE SEMI\n           | block\n           | statement statement\n           | statement NEWLINE\n           | empty\n\n    \n    expr_or_empty : expr\n                    | empty\n    else_or_empty : ELSE block\n                    | else_or_empty else_or_empty\n                    | empty\n    \n    method_call : method_name  O_PAR arg C_PAR\n           | CALLOUT O_PAR string_literal C_PAR\n           | CALLOUT O_PAR string_literal COMMA call COMMA C_PAR\n    method_name : IDENTIFIER\n    arg : expr\n      | expr COMMA arg\n    location : IDENTIFIER\n           | IDENTIFIER O_BRACKET expr C_BRACKET\n    expr : location\n           | method_call\n           | literal\n           | expr bin_op expr\n           | NEGATIVE expr\n           | EXCL expr\n           | O_PAR expr C_PAR\n           | expr expr\n           | expr NEWLINE\n    \n    call : callout_arg\n     | callout_arg call\n     \n    callout_arg : expr\n                    | string_literal\n                    | callout_arg\n    \n     bin_op : ARITH_OP\n           | REP_OP\n           | EQ_OP\n           | COND_OP\n    \n    literal : int_literal\n           | char_literal\n           | bool_literal\n    \n    int_literal : DECIMAL\n                    | HEXDECIMAL\n    \n    bool_literal : TRUE\n                    | FALSE\n    \n    char_literal : CHAR\n    \n    string_literal : STRING\n     empty : '
    
_lr_action_items = {'CLASS':([0,],[2,]),'$end':([1,20,],[0,-1,]),'PROGRAM':([2,],[3,]),'OPEN':([3,36,40,42,43,45,47,51,56,62,63,64,65,66,68,86,87,91,96,113,114,115,124,130,133,134,135,137,138,],[4,40,-77,40,-18,-21,40,-33,-36,-20,40,-17,-35,-36,-27,-31,-32,-19,-30,-26,40,40,-29,-77,-28,40,-41,-40,-39,]),'INT':([4,5,7,10,11,12,14,19,21,22,25,28,37,39,40,42,43,45,46,56,62,64,91,],[8,8,-5,8,8,-4,-5,8,-10,-12,-2,8,8,-9,8,8,-18,-21,8,-21,-20,-17,-19,]),'BOOLEAN':([4,5,7,10,11,12,14,19,21,22,25,28,37,39,40,42,43,45,46,56,62,64,91,],[9,9,-5,9,9,-4,-5,9,-10,-12,-2,9,9,-9,9,9,-18,-21,9,-21,-20,-17,-19,]),'NEWLINE':([4,5,7,10,11,12,14,19,21,22,25,31,32,39,40,42,43,45,46,47,51,56,57,62,63,64,65,66,68,72,74,75,76,80,81,82,83,84,85,86,87,91,93,94,95,96,97,99,104,105,106,107,109,113,116,117,118,119,121,123,124,129,130,133,135,136,137,138,],[-77,12,-5,12,21,-4,-5,21,-10,-12,-2,-71,-72,-9,-77,-77,-18,-21,62,65,-33,-21,-48,-20,65,-17,-35,-36,-27,99,-50,-51,-52,-68,-69,-70,-75,-73,-74,-31,-32,-19,99,99,99,-30,99,-58,99,99,99,99,99,-26,99,-56,-49,-42,-43,130,-29,99,-77,-28,-41,-44,-40,-39,]),'VOID':([4,5,7,10,11,12,14,19,21,22,25,39,43,64,],[-77,16,-5,-3,16,-4,-5,16,-10,-12,-2,-9,-18,-17,]),'CLOSE':([4,5,7,10,11,12,14,19,21,22,25,39,40,42,43,45,47,51,56,62,63,64,65,66,68,86,87,91,96,113,124,130,133,135,137,138,],[-77,-77,-5,-3,20,-4,-5,-11,-10,-12,-2,-9,43,-77,-18,-21,64,-33,-36,-20,-34,-17,-35,-36,-27,-31,-32,-19,-30,-26,-29,-77,-28,-41,-40,-39,]),'IDENTIFIER':([6,8,9,13,15,16,23,26,31,32,34,40,42,43,44,45,47,51,53,56,57,62,63,64,65,66,67,68,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,111,113,116,117,118,119,120,121,122,124,126,128,129,130,133,135,136,137,138,],[18,-24,-25,24,18,-16,-15,18,-71,-72,38,-77,57,-18,61,-21,57,-33,57,-36,-48,-20,57,-17,-35,-36,57,-27,57,57,57,-50,-51,-52,57,57,57,-68,-69,-70,-75,-73,-74,-31,-32,57,57,-19,61,57,57,57,-30,57,57,-58,-64,-65,-66,-67,57,57,57,57,57,-76,-26,57,-56,-49,-42,57,-43,57,-29,-62,57,57,-77,-28,-41,-44,-40,-39,]),'SEMI':([17,18,29,31,32,35,49,53,54,55,57,60,61,71,72,73,74,75,76,80,81,82,83,84,85,93,97,99,104,105,112,116,117,118,119,121,136,],[25,-6,-8,-71,-72,-7,68,-77,86,87,-48,91,-22,96,-37,-38,-50,-51,-52,-68,-69,-70,-75,-73,-74,113,-57,-58,-54,-55,-23,-53,-56,-49,-42,-43,-44,]),'COMMA':([17,18,29,31,32,33,35,38,41,57,60,61,74,75,76,80,81,82,83,84,85,97,99,104,105,109,110,111,112,116,117,118,119,121,126,127,128,129,132,136,],[26,-6,26,-71,-72,37,-7,-13,37,-48,92,-22,-50,-51,-52,-68,-69,-70,-75,-73,-74,-57,-58,-54,-55,120,122,-76,92,-53,-56,-49,-42,-43,-62,131,-59,-61,-60,-44,]),'O_BRACKET':([18,57,],[27,88,]),'O_PAR':([24,31,32,50,52,53,57,58,59,67,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,88,89,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,116,117,118,119,120,121,122,126,128,129,136,],[28,-71,-72,69,70,79,-45,89,90,79,79,79,79,-50,-51,-52,79,79,79,-68,-69,-70,-75,-73,-74,79,79,79,79,79,79,79,-58,-64,-65,-66,-67,79,79,79,79,79,-76,79,-56,-49,-42,79,-43,79,-62,79,79,-44,]),'DECIMAL':([27,31,32,53,57,67,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,88,89,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,116,117,118,119,120,121,122,126,128,129,136,],[31,-71,-72,31,-48,31,31,31,31,-50,-51,-52,31,31,31,-68,-69,-70,-75,-73,-74,31,31,31,31,31,31,31,-58,-64,-65,-66,-67,31,31,31,31,31,-76,31,-56,-49,-42,31,-43,31,-62,31,31,-44,]),'HEXDECIMAL':([27,31,32,53,57,67,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,88,89,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,116,117,118,119,120,121,122,126,128,129,136,],[32,-71,-72,32,-48,32,32,32,32,-50,-51,-52,32,32,32,-68,-69,-70,-75,-73,-74,32,32,32,32,32,32,32,-58,-64,-65,-66,-67,32,32,32,32,32,-76,32,-56,-49,-42,32,-43,32,-62,32,32,-44,]),'C_BRACKET':([30,31,32,57,74,75,76,80,81,82,83,84,85,97,99,104,105,107,116,117,118,119,121,136,],[35,-71,-72,-48,-50,-51,-52,-68,-69,-70,-75,-73,-74,-57,-58,-54,-55,118,-53,-56,-49,-42,-43,-44,]),'ARITH_OP':([31,32,57,72,74,75,76,80,81,82,83,84,85,93,94,95,97,99,104,105,106,107,109,116,117,118,119,121,129,136,],[-71,-72,-48,100,-50,-51,-52,-68,-69,-70,-75,-73,-74,100,100,100,100,-58,100,100,100,100,100,100,-56,-49,-42,-43,100,-44,]),'REP_OP':([31,32,57,72,74,75,76,80,81,82,83,84,85,93,94,95,97,99,104,105,106,107,109,116,117,118,119,121,129,136,],[-71,-72,-48,101,-50,-51,-52,-68,-69,-70,-75,-73,-74,101,101,101,101,-58,101,101,101,101,101,101,-56,-49,-42,-43,101,-44,]),'EQ_OP':([31,32,57,72,74,75,76,80,81,82,83,84,85,93,94,95,97,99,104,105,106,107,109,116,117,118,119,121,129,136,],[-71,-72,-48,102,-50,-51,-52,-68,-69,-70,-75,-73,-74,102,102,102,102,-58,102,102,102,102,102,102,-56,-49,-42,-43,102,-44,]),'COND_OP':([31,32,57,72,74,75,76,80,81,82,83,84,85,93,94,95,97,99,104,105,106,107,109,116,117,118,119,121,129,136,],[-71,-72,-48,103,-50,-51,-52,-68,-69,-70,-75,-73,-74,103,103,103,103,-58,103,103,103,103,103,103,-56,-49,-42,-43,103,-44,]),'NEGATIVE':([31,32,53,57,67,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,88,89,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,116,117,118,119,120,121,122,126,128,129,136,],[-71,-72,77,-48,77,77,77,77,-50,-51,-52,77,77,77,-68,-69,-70,-75,-73,-74,77,77,77,77,77,77,77,-58,-64,-65,-66,-67,77,77,77,77,77,-76,77,-56,-49,-42,77,-43,77,-62,77,77,-44,]),'EXCL':([31,32,53,57,67,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,88,89,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,116,117,118,119,120,121,122,126,128,129,136,],[-71,-72,78,-48,78,78,78,78,-50,-51,-52,78,78,78,-68,-69,-70,-75,-73,-74,78,78,78,78,78,78,78,-58,-64,-65,-66,-67,78,78,78,78,78,-76,78,-56,-49,-42,78,-43,78,-62,78,78,-44,]),'CALLOUT':([31,32,40,42,43,45,47,51,53,56,57,62,63,64,65,66,67,68,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,111,113,116,117,118,119,120,121,122,124,126,128,129,130,133,135,136,137,138,],[-71,-72,-77,59,-18,-21,59,-33,59,-36,-48,-20,59,-17,-35,-36,59,-27,59,59,59,-50,-51,-52,59,59,59,-68,-69,-70,-75,-73,-74,-31,-32,59,59,-19,59,59,59,-30,59,59,-58,-64,-65,-66,-67,59,59,59,59,59,-76,-26,59,-56,-49,-42,59,-43,59,-29,-62,59,59,-77,-28,-41,-44,-40,-39,]),'CHAR':([31,32,53,57,67,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,88,89,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,116,117,118,119,120,121,122,126,128,129,136,],[-71,-72,83,-48,83,83,83,83,-50,-51,-52,83,83,83,-68,-69,-70,-75,-73,-74,83,83,83,83,83,83,83,-58,-64,-65,-66,-67,83,83,83,83,83,-76,83,-56,-49,-42,83,-43,83,-62,83,83,-44,]),'TRUE':([31,32,53,57,67,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,88,89,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,116,117,118,119,120,121,122,126,128,129,136,],[-71,-72,84,-48,84,84,84,84,-50,-51,-52,84,84,84,-68,-69,-70,-75,-73,-74,84,84,84,84,84,84,84,-58,-64,-65,-66,-67,84,84,84,84,84,-76,84,-56,-49,-42,84,-43,84,-62,84,84,-44,]),'FALSE':([31,32,53,57,67,69,70,72,74,75,76,77,78,79,80,81,82,83,84,85,88,89,93,94,95,97,98,99,100,101,102,103,104,105,106,107,109,111,116,117,118,119,120,121,122,126,128,129,136,],[-71,-72,85,-48,85,85,85,85,-50,-51,-52,85,85,85,-68,-69,-70,-75,-73,-74,85,85,85,85,85,85,85,-58,-64,-65,-66,-67,85,85,85,85,85,-76,85,-56,-49,-42,85,-43,85,-62,85,85,-44,]),'C_PAR':([31,32,33,38,41,57,74,75,76,80,81,82,83,84,85,94,95,97,99,104,105,106,108,109,110,111,116,117,118,119,121,125,131,136,],[-71,-72,36,-13,-14,-48,-50,-51,-52,-68,-69,-70,-75,-73,-74,114,115,-57,-58,-54,-55,117,119,-46,121,-76,-53,-56,-49,-42,-43,-47,136,-44,]),'STRING':([31,32,57,74,75,76,80,81,82,83,84,85,90,97,99,104,105,111,116,117,118,119,121,122,126,128,129,136,],[-71,-72,-48,-50,-51,-52,-68,-69,-70,-75,-73,-74,111,-57,-58,-54,-55,-76,-53,-56,-49,-42,-43,111,-62,111,-61,-44,]),'IF':([40,42,43,45,47,51,56,62,63,64,65,66,68,86,87,91,96,113,124,130,133,135,137,138,],[-77,50,-18,-21,50,-33,-36,-20,50,-17,-35,-36,-27,-31,-32,-19,-30,-26,-29,-77,-28,-41,-40,-39,]),'WHILE':([40,42,43,45,47,51,56,62,63,64,65,66,68,86,87,91,96,113,124,130,133,135,137,138,],[-77,52,-18,-21,52,-33,-36,-20,52,-17,-35,-36,-27,-31,-32,-19,-30,-26,-29,-77,-28,-41,-40,-39,]),'RETURN':([40,42,43,45,47,51,56,62,63,64,65,66,68,86,87,91,96,113,124,130,133,135,137,138,],[-77,53,-18,-21,53,-33,-36,-20,53,-17,-35,-36,-27,-31,-32,-19,-30,-26,-29,-77,-28,-41,-40,-39,]),'BREAK':([40,42,43,45,47,51,56,62,63,64,65,66,68,86,87,91,96,113,124,130,133,135,137,138,],[-77,54,-18,-21,54,-33,-36,-20,54,-17,-35,-36,-27,-31,-32,-19,-30,-26,-29,-77,-28,-41,-40,-39,]),'CONTINUE':([40,42,43,45,47,51,56,62,63,64,65,66,68,86,87,91,96,113,124,130,133,135,137,138,],[-77,55,-18,-21,55,-33,-36,-20,55,-17,-35,-36,-27,-31,-32,-19,-30,-26,-29,-77,-28,-41,-40,-39,]),'ELSE':([43,64,130,133,135,137,138,],[-18,-17,134,134,-41,134,-39,]),'ASSIGN':([48,57,118,],[67,-48,-49,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'field_decl':([4,5,10,],[5,10,10,]),'type':([4,5,10,11,19,28,37,40,42,46,],[6,15,6,23,23,34,34,44,44,44,]),'empty':([4,5,10,11,19,40,42,46,47,53,63,130,133,137,],[7,14,7,22,22,45,56,45,66,73,66,135,135,135,]),'method_decl':([5,11,19,],[11,19,19,]),'type_or_void':([5,11,19,],[13,13,13,]),'field_decl_1':([6,15,26,],[17,17,29,]),'int_literal':([27,53,67,69,70,72,77,78,79,88,89,93,94,95,97,98,104,105,106,107,109,116,120,122,128,129,],[30,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'type_and_id':([28,37,],[33,41,]),'block':([36,42,47,63,114,115,134,],[39,51,51,51,123,124,138,]),'var_decl':([40,42,46,],[42,46,46,]),'statement':([42,47,63,],[47,63,63,]),'location':([42,47,53,63,67,69,70,72,77,78,79,88,89,93,94,95,97,98,104,105,106,107,109,116,120,122,128,129,],[48,48,74,48,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'method_call':([42,47,53,63,67,69,70,72,77,78,79,88,89,93,94,95,97,98,104,105,106,107,109,116,120,122,128,129,],[49,49,75,49,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'method_name':([42,47,53,63,67,69,70,72,77,78,79,88,89,93,94,95,97,98,104,105,106,107,109,116,120,122,128,129,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'var_decl_1':([44,92,],[60,112,]),'expr_or_empty':([53,],[71,]),'expr':([53,67,69,70,72,77,78,79,88,89,93,94,95,97,98,104,105,106,107,109,116,120,122,128,129,],[72,93,94,95,97,104,105,106,107,109,97,97,97,97,116,97,97,97,97,97,97,109,129,129,97,]),'literal':([53,67,69,70,72,77,78,79,88,89,93,94,95,97,98,104,105,106,107,109,116,120,122,128,129,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'char_literal':([53,67,69,70,72,77,78,79,88,89,93,94,95,97,98,104,105,106,107,109,116,120,122,128,129,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'bool_literal':([53,67,69,70,72,77,78,79,88,89,93,94,95,97,98,104,105,106,107,109,116,120,122,128,129,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'bin_op':([72,93,94,95,97,104,105,106,107,109,116,129,],[98,98,98,98,98,98,98,98,98,98,98,98,]),'arg':([89,120,],[108,125,]),'string_literal':([90,122,128,],[110,126,126,]),'call':([122,128,],[127,132,]),'callout_arg':([122,128,],[128,128,]),'else_or_empty':([130,133,137,],[133,137,137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> CLASS PROGRAM OPEN field_decl method_decl CLOSE','program',6,'p_program','phase2_parser_yacc.py',13),
  ('field_decl -> type field_decl_1 SEMI','field_decl',3,'p_field_decl','phase2_parser_yacc.py',19),
  ('field_decl -> field_decl field_decl','field_decl',2,'p_field_decl','phase2_parser_yacc.py',20),
  ('field_decl -> field_decl NEWLINE','field_decl',2,'p_field_decl','phase2_parser_yacc.py',21),
  ('field_decl -> empty','field_decl',1,'p_field_decl','phase2_parser_yacc.py',22),
  ('field_decl_1 -> IDENTIFIER','field_decl_1',1,'p_field_decl_1','phase2_parser_yacc.py',28),
  ('field_decl_1 -> IDENTIFIER O_BRACKET int_literal C_BRACKET','field_decl_1',4,'p_field_decl_1','phase2_parser_yacc.py',29),
  ('field_decl_1 -> field_decl_1 COMMA field_decl_1','field_decl_1',3,'p_field_decl_1','phase2_parser_yacc.py',30),
  ('method_decl -> type_or_void IDENTIFIER O_PAR type_and_id C_PAR block','method_decl',6,'p_method_decl','phase2_parser_yacc.py',37),
  ('method_decl -> method_decl NEWLINE','method_decl',2,'p_method_decl','phase2_parser_yacc.py',38),
  ('method_decl -> method_decl method_decl','method_decl',2,'p_method_decl','phase2_parser_yacc.py',39),
  ('method_decl -> empty','method_decl',1,'p_method_decl','phase2_parser_yacc.py',40),
  ('type_and_id -> type IDENTIFIER','type_and_id',2,'p_type_and_id','phase2_parser_yacc.py',47),
  ('type_and_id -> type_and_id COMMA type_and_id','type_and_id',3,'p_type_and_id','phase2_parser_yacc.py',48),
  ('type_or_void -> type','type_or_void',1,'p_type_or_void','phase2_parser_yacc.py',55),
  ('type_or_void -> VOID','type_or_void',1,'p_type_or_void','phase2_parser_yacc.py',56),
  ('block -> OPEN var_decl statement CLOSE','block',4,'p_block','phase2_parser_yacc.py',63),
  ('block -> OPEN CLOSE','block',2,'p_block','phase2_parser_yacc.py',64),
  ('var_decl -> type var_decl_1 SEMI','var_decl',3,'p_var_decl','phase2_parser_yacc.py',70),
  ('var_decl -> var_decl var_decl NEWLINE','var_decl',3,'p_var_decl','phase2_parser_yacc.py',71),
  ('var_decl -> empty','var_decl',1,'p_var_decl','phase2_parser_yacc.py',72),
  ('var_decl_1 -> IDENTIFIER','var_decl_1',1,'p_var_decl_1','phase2_parser_yacc.py',78),
  ('var_decl_1 -> var_decl_1 COMMA var_decl_1','var_decl_1',3,'p_var_decl_1','phase2_parser_yacc.py',79),
  ('type -> INT','type',1,'p_type','phase2_parser_yacc.py',84),
  ('type -> BOOLEAN','type',1,'p_type','phase2_parser_yacc.py',85),
  ('statement -> location ASSIGN expr SEMI','statement',4,'p_statement','phase2_parser_yacc.py',90),
  ('statement -> method_call SEMI','statement',2,'p_statement','phase2_parser_yacc.py',91),
  ('statement -> IF O_PAR expr C_PAR block NEWLINE else_or_empty','statement',7,'p_statement','phase2_parser_yacc.py',92),
  ('statement -> WHILE O_PAR expr C_PAR block','statement',5,'p_statement','phase2_parser_yacc.py',93),
  ('statement -> RETURN expr_or_empty SEMI','statement',3,'p_statement','phase2_parser_yacc.py',94),
  ('statement -> BREAK SEMI','statement',2,'p_statement','phase2_parser_yacc.py',95),
  ('statement -> CONTINUE SEMI','statement',2,'p_statement','phase2_parser_yacc.py',96),
  ('statement -> block','statement',1,'p_statement','phase2_parser_yacc.py',97),
  ('statement -> statement statement','statement',2,'p_statement','phase2_parser_yacc.py',98),
  ('statement -> statement NEWLINE','statement',2,'p_statement','phase2_parser_yacc.py',99),
  ('statement -> empty','statement',1,'p_statement','phase2_parser_yacc.py',100),
  ('expr_or_empty -> expr','expr_or_empty',1,'p_expr_or_empty','phase2_parser_yacc.py',108),
  ('expr_or_empty -> empty','expr_or_empty',1,'p_expr_or_empty','phase2_parser_yacc.py',109),
  ('else_or_empty -> ELSE block','else_or_empty',2,'p_else_or_empty','phase2_parser_yacc.py',114),
  ('else_or_empty -> else_or_empty else_or_empty','else_or_empty',2,'p_else_or_empty','phase2_parser_yacc.py',115),
  ('else_or_empty -> empty','else_or_empty',1,'p_else_or_empty','phase2_parser_yacc.py',116),
  ('method_call -> method_name O_PAR arg C_PAR','method_call',4,'p_method_call','phase2_parser_yacc.py',123),
  ('method_call -> CALLOUT O_PAR string_literal C_PAR','method_call',4,'p_method_call','phase2_parser_yacc.py',124),
  ('method_call -> CALLOUT O_PAR string_literal COMMA call COMMA C_PAR','method_call',7,'p_method_call','phase2_parser_yacc.py',125),
  ('method_name -> IDENTIFIER','method_name',1,'p_method_name','phase2_parser_yacc.py',131),
  ('arg -> expr','arg',1,'p_arg','phase2_parser_yacc.py',137),
  ('arg -> expr COMMA arg','arg',3,'p_arg','phase2_parser_yacc.py',138),
  ('location -> IDENTIFIER','location',1,'p_location','phase2_parser_yacc.py',144),
  ('location -> IDENTIFIER O_BRACKET expr C_BRACKET','location',4,'p_location','phase2_parser_yacc.py',145),
  ('expr -> location','expr',1,'p_expr','phase2_parser_yacc.py',151),
  ('expr -> method_call','expr',1,'p_expr','phase2_parser_yacc.py',152),
  ('expr -> literal','expr',1,'p_expr','phase2_parser_yacc.py',153),
  ('expr -> expr bin_op expr','expr',3,'p_expr','phase2_parser_yacc.py',154),
  ('expr -> NEGATIVE expr','expr',2,'p_expr','phase2_parser_yacc.py',155),
  ('expr -> EXCL expr','expr',2,'p_expr','phase2_parser_yacc.py',156),
  ('expr -> O_PAR expr C_PAR','expr',3,'p_expr','phase2_parser_yacc.py',157),
  ('expr -> expr expr','expr',2,'p_expr','phase2_parser_yacc.py',158),
  ('expr -> expr NEWLINE','expr',2,'p_expr','phase2_parser_yacc.py',159),
  ('call -> callout_arg','call',1,'p_call','phase2_parser_yacc.py',166),
  ('call -> callout_arg call','call',2,'p_call','phase2_parser_yacc.py',167),
  ('callout_arg -> expr','callout_arg',1,'p_callout_arg','phase2_parser_yacc.py',174),
  ('callout_arg -> string_literal','callout_arg',1,'p_callout_arg','phase2_parser_yacc.py',175),
  ('callout_arg -> callout_arg','callout_arg',1,'p_callout_arg','phase2_parser_yacc.py',176),
  ('bin_op -> ARITH_OP','bin_op',1,'p_bin_op','phase2_parser_yacc.py',183),
  ('bin_op -> REP_OP','bin_op',1,'p_bin_op','phase2_parser_yacc.py',184),
  ('bin_op -> EQ_OP','bin_op',1,'p_bin_op','phase2_parser_yacc.py',185),
  ('bin_op -> COND_OP','bin_op',1,'p_bin_op','phase2_parser_yacc.py',186),
  ('literal -> int_literal','literal',1,'p_literal','phase2_parser_yacc.py',193),
  ('literal -> char_literal','literal',1,'p_literal','phase2_parser_yacc.py',194),
  ('literal -> bool_literal','literal',1,'p_literal','phase2_parser_yacc.py',195),
  ('int_literal -> DECIMAL','int_literal',1,'p_int_literal','phase2_parser_yacc.py',202),
  ('int_literal -> HEXDECIMAL','int_literal',1,'p_int_literal','phase2_parser_yacc.py',203),
  ('bool_literal -> TRUE','bool_literal',1,'p_bool_literal','phase2_parser_yacc.py',210),
  ('bool_literal -> FALSE','bool_literal',1,'p_bool_literal','phase2_parser_yacc.py',211),
  ('char_literal -> CHAR','char_literal',1,'p_char_literal','phase2_parser_yacc.py',218),
  ('string_literal -> STRING','string_literal',1,'p_string_literal','phase2_parser_yacc.py',225),
  ('empty -> <empty>','empty',0,'p_empty','phase2_parser_yacc.py',231),
]
